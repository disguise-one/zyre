The following ABNF grammar defines the work with ZRE messages:

    zre             = greeting *traffic
    greeting        = hello
    traffic         = whisper / shout / join / leave / ping / ping-ok / resend

    ;  Greet a peer so it can connect back to us                             

    HELLO           = signature %d1 version sequence ack endpoint groups status name headers
    signature       = %xAA %xA1             ; two octets
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    endpoint        = string                ; Sender connect endpoint
    groups          = strings               ; List of groups sender is in
    status          = number-1              ; Sender groups status value
    name            = string                ; Sender public name
    headers         = hash                  ; Sender header properties

    ;  Send a multi-part message to a peer                                   

    WHISPER         = signature %d2 version sequence ack content
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    content         = msg                   ; Wrapped message content

    ;  Send a multi-part message to a group                                  

    SHOUT           = signature %d3 version sequence ack group content
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    group           = string                ; Group to send to
    content         = msg                   ; Wrapped message content

    ;  Join a group                                                          

    JOIN            = signature %d4 version sequence ack group status
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    group           = string                ; Name of group
    status          = number-1              ; Sender groups status value

    ;  Leave a group                                                         

    LEAVE           = signature %d5 version sequence ack group status
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    group           = string                ; Name of group
    status          = number-1              ; Sender groups status value

    ;  Ping a peer that has gone silent                                      

    PING            = signature %d6 version sequence ack
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number

    ;  Reply to a peer's ping                                                

    PING-OK         = signature %d7 version sequence ack
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number

    ;  Resend request for a range of sequence numbers                        

    RESEND          = signature %d8 version sequence ack start end
    version         = number-1              ; Version number (3)
    sequence        = number-2              ; Cyclic sequence number
    ack             = number-2              ; Acknowledged sequence number
    start           = number-2              ; Sequence number range start
    end             = number-2              ; Sequence number range end (exclusive)

    ; A list of string values
    strings         = strings-count *strings-value
    strings-count   = number-4
    strings-value   = longstr

    ; A list of name/value pairs
    hash            = hash-count *( hash-name hash-value )
    hash-count      = number-4
    hash-value      = longstr
    hash-name       = string

    ; A msg is zero or more distinct frames
    msg             = *frame

    ; Strings are always length + text contents
    string          = number-1 *VCHAR
    longstr         = number-4 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-2        = 2OCTET
    number-4        = 4OCTET
